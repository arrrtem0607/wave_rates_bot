import os
import random
from datetime import date
from decimal import Decimal

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

from database import get_session
from controllers import CurrencyController
from logger import setup_logger

# --- Setup ---

load_dotenv()
logger = setup_logger(__name__, level="WARNING")

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

ALLOWED_USERS = [int(id) for id in os.getenv("ALLOWED_USERS", "").split(",") if id]
TARGET_GROUP_ID = int(os.getenv("TARGET_GROUP_ID"))
rate_messages = {}

# --- Utils ---

def is_allowed_user(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

# --- Task: send requests ---

async def request_currency_inputs():
    """Send messages requesting currency rates"""
    try:
        ust_msg = await bot.send_message(TARGET_GROUP_ID, "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å UST/RUB –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        cny_msg = await bot.send_message(TARGET_GROUP_ID, "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å CNY/RUB –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

        rate_messages["ust"] = ust_msg.message_id
        rate_messages["cny"] = cny_msg.message_id

        logger.info("üì© –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram: {e}")

# --- Message handler ---

@dp.message()
async def handle_message(message: Message):
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={message.from_user.id}: {message.text}")

    if not message.reply_to_message:
        logger.info("‚Ü©Ô∏è –ù–µ—Ç reply_to_message ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    logger.info(f"üîÅ Reply to message_id={message.reply_to_message.message_id}")
    logger.info(f"üß† –í –ø–∞–º—è—Ç–∏: UST={rate_messages.get('ust')}, CNY={rate_messages.get('cny')}")

    if message.reply_to_message.message_id not in rate_messages.values():
        logger.info("‚ùå reply_to_message.message_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ ID")
        return

    if not is_allowed_user(message.from_user.id):
        await message.reply(random.choice([
            "–ö—É—Ä—Å—ã –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ú–∞–∫—Å üíº",
            "–Ø –≤–æ–æ–±—â–µ-—Ç–æ —É –ú–∞–∫—Å–∏–º–∞ —Å–ø—Ä–æ—Å–∏–ª ü§î",
            "–ñ–¥—É –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –ú–∞–∫—Å–∏–º–∞, –∫–∞–∫ –≤—Å–µ–≥–¥–∞ üòè",
            "–ú–∞–∫—Å–∏–º, —Ç—ã –≥–¥–µ? –û–ø—è—Ç—å –ø–µ—Ä–µ–ø–æ—Ä—É—á–∏–ª?",
            "–≠—Ç–æ –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ú–∞–∫—Å–∞ üëî",
            "–ö—É—Ä—Å—ã ‚Äî —ç—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ. –ú–∞–∫—Å–∏–º, –≤—ã–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é!"
        ]))
        logger.warning(f"‚õîÔ∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ –∫—É—Ä—Å")
        return

    try:
        rate = Decimal(message.text.replace(",", "."))
    except Exception:
        logger.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ: {message.text}")
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    async with get_session() as session:
        controller = CurrencyController(session)

        if message.reply_to_message.message_id == rate_messages.get("ust"):
            rate_messages["ust_value"] = float(rate)
            logger.info(f"üíæ –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å UST: {rate}")
        elif message.reply_to_message.message_id == rate_messages.get("cny"):
            rate_messages["cny_value"] = float(rate)
            logger.info(f"üíæ –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å CNY: {rate}")

        # –ú–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å –≤–≤–µ–¥—ë–Ω
        if (
            ("ust_value" in rate_messages and "cny_value" not in rate_messages) or
            ("cny_value" in rate_messages and "ust_value" not in rate_messages)
        ):
            await message.reply(random.choice([
                "–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –≤—Ç–æ—Ä–æ–π –∫—É—Ä—Å üíπ",
                "–ñ–¥—É –≤—Ç–æ—Ä–æ–π –∫—É—Ä—Å... –Ω–µ —Ç—è–Ω–∏ –∫–∞–∫ –ú–∏–Ω—Ñ–∏–Ω —Å –±—é–¥–∂–µ—Ç–æ–º üï∞Ô∏è",
                "–ö—É—Ä—Å –æ–¥–∏–Ω ‚Äî –Ω–µ –∫—É—Ä—Å. –ú–∞–∫—Å–∏–º, –¥–æ–±–∞–≤—å –µ—â—ë —Ü–∏—Ñ—Ä—É üìä",
                "–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ. –ê —Ç–µ–ø–µ—Ä—å –≤—Ç–æ—Ä–æ–π –∫—É—Ä—Å, –∏ –±—É–¥–µ—Ç –≤–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∞ üòé",
                "–ü–æ–ª–æ–≤–∏–Ω—É –¥–µ–ª–∞ —Å–¥–µ–ª–∞–ª ‚Äî —Ç–µ–ø–µ—Ä—å –¥–æ–¥–µ–ª–∞–π üíº"
            ]))

        # –ï—Å–ª–∏ –æ–±–∞ –∫—É—Ä—Å–∞ –≤–≤–µ–¥–µ–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if "ust_value" in rate_messages and "cny_value" in rate_messages:
            try:
                existing = await controller.get_rates_by_date(date.today())
                if existing:
                    await message.reply(random.choice([
                        "–ö—É—Ä—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤ –±–∞–∑–µ üìö",
                        "–£–∂–µ –≤—Å—ë –∑–∞–ø–∏—Å–∞–Ω–æ ‚Äî –≤—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ üòÖ",
                        "–î–≤–∞–∂–¥—ã –æ–¥–Ω—É –∏ —Ç—É –∂–µ —ç–∫–æ–Ω–æ–º–∏–∫—É –Ω–µ —Å–ø–∞—Å–∞—é—Ç üí∞",
                        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫—É—Ä—Å—ã —É–∂–µ –±—ã–ª–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã ‚úçÔ∏è"
                    ]))
                    logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É")
                    return

                await controller.add_rates(
                    ust=rate_messages["ust_value"],
                    cny=rate_messages["cny_value"],
                    date=date.today()
                )

                await message.reply(random.choice([
                    f"–ö—É—Ä—Å—ã –Ω–∞ {date.today()} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã üìà",
                    f"–ú–∞–∫—Å–∏–º –ø–µ—Ä–µ–¥–∞–ª ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ ‚úÖ",
                    f"–ü–æ –∫—É—Ä—Å–∞–º –≤—Å—ë —á—ë—Ç–∫–æ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞ üëç",
                    f"–ì–æ—Ç–æ–≤–æ. –≠–∫–æ–Ω–æ–º–∏–∫–∞ –º–æ–∂–µ—Ç —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ üòé",
                    f"–°–æ—Ö—Ä–∞–Ω–∏–ª. –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –º–æ–∂–µ—Ç –æ—Ç–¥—ã—Ö–∞—Ç—å üè¶",
                    f"–°–ø–∞—Å–∏–±–æ, –ú–∞–∫—Å–∏–º. –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º üìä"
                ]))

                logger.info("‚úÖ –ö—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î. –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
                rate_messages.clear()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤")

# --- Main loop ---

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        request_currency_inputs,
        CronTrigger(hour=16, minute=26, timezone="Europe/Moscow")
    )
    scheduler.start()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    await dp.start_polling(bot)

# --- Entry ---

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
