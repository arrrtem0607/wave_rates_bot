import os
import asyncio
from datetime import date
from decimal import Decimal
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

from database import get_session
from controllers import CurrencyController
from logger import setup_logger

load_dotenv()
logger = setup_logger(__name__, level="INFO")

bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

TARGET_USER_ID = int(os.getenv("TARGET_USER_ID"))
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID"))

rate_cache = {"requested": False}

# --- Tasks ---

async def request_currency_inputs():
    try:
        await bot.send_message(TARGET_USER_ID,
            "üì• –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –≤–∞–ª—é—Ç (USD –∏ CNY) –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å —É—á—ë—Ç–æ–º –≤–∞—à–µ–π –Ω–∞—Ü–µ–Ω–∫–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n<code>93.15\n12.85</code>")
        rate_cache["requested"] = True
        logger.info("üì© –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∫—É—Ä—Å—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def check_repeat_request():
    if not rate_cache.get("usd") or not rate_cache.get("cny"):
        logger.info("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤ 12:00")
        await request_currency_inputs()

# --- Handlers ---

@dp.message(F.text)
async def handle_currency_message(message: Message):
    if message.from_user.id != TARGET_USER_ID or not rate_cache.get("requested"):
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        raw_text = message.text.replace(",", ".")
        parts = [Decimal(p) for p in raw_text.replace("\n", " ").split() if p.replace('.', '', 1).isdigit()]

        if len(parts) != 2:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∫—É—Ä—Å–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<code>93.15 12.85</code>")
            return

        usd_markup, cny_markup = max(parts), min(parts)

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã
        usd_base = (usd_markup - Decimal("1.00")).quantize(Decimal("0.0001"))
        cny_base = (cny_markup / Decimal("1.02")).quantize(Decimal("0.0001"))

        rate_cache.update({
            "usd": usd_base,
            "cny": cny_base,
            "requested": False
        })

        async with get_session() as session:
            controller = CurrencyController(session)
            await controller.add_rates(
                ust=float(usd_base),
                cny=float(cny_base),
                date=date.today()
            )

        logger.info("üíæ –ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        await bot.send_message(
            MANAGER_CHAT_ID,
            f"<b>üìä –ö—É—Ä—Å—ã –Ω–∞ {date.today().strftime('%d.%m.%Y')}:</b>\n\n"
            f"üá∫üá∏ USD: <b>{usd_markup:.2f}‚ÇΩ</b>\n"
            f"üá®üá≥ CNY: <b>{cny_markup:.2f}‚ÇΩ</b>"
        )

        await message.reply("‚úÖ –ö—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É—Ä—Å–æ–≤: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –¥–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —á–∏—Å–ª–∞.")

# --- Entry point ---

async def main():
    scheduler.add_job(request_currency_inputs, CronTrigger(hour=10, minute=00))
    scheduler.add_job(check_repeat_request, CronTrigger(hour=12, minute=00))
    scheduler.start()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())